//////////////////////
// Helper Functions //

extend_map = function(map1, map2)
    for data in map2
        map1.push(data)
    end for

    return map1
end function

// End Helper Functions //
//////////////////////////

////////////////////////////
// Define initiator class //
ClassLib = {}

libs = {}
libs.metax = null

ClassLib.requires_metax = function()
    if libs.metax == null then
        libs.metax = include_lib("/lib/metaxploit.so")
    end if
end function

// End Initiator Class//
////////////////////////

/////////////////////////////////
// We define our network class //
Network = {}

// Attributes
Network.essid = null
Network.bssid = null
Network.power = null
Network.to_string = null

Network.init = function(network_as_string)
    network = new Network
    network._init(network_as_string)

    return network
end function

Network._init = function(network_as_string)
    self.to_string = network_as_string

    network = network_as_string.split(" ")
    self.essid = network[2]
    self.bssid = network[0]
    self.power = network[1][:2]

    self.to_map = {
        "essid": self.essid,
        "bssid": self.bssid,
        "power": self.power,
    }
end function

Network.get_networks = function(device="wlan0")
    network_list = get_shell.host_computer.wifi_networks(device)
    networks = []

    for network in network_list
        network_class = new Network
        network_class.init(network)

        networks.push(network_class)
    end for
end function

// End Network Class //
///////////////////////

//////////////////////////
// Define MetaLib Class //

MetaLib = {}

// Attributes
MetaLib.net_session = null
MetaLib.meta_lib = null
MetaLib.port = null
MetaLib.ip = null
MetaLib.vulnerable_addresses = null
MetaLib.exploits = null

MetaLib.init = function(pub_ip, port)
    metalib = new MetaLib
    metalib._init(pub_ip, port)

    return metalib
end function

MetaLib._init = function(pub_ip, port)
    ClassLib.requires_metax()

    self.net_session = libs.metax.net_use(public_ip, port.port_number)
    self.meta_lib = net_session.dump_lib
    self.port = port
    self.ip = port.get_lan_ip
    self.pub_ip = pub_ip
end function

MetaLib.find_vulnerabilities = function()
    if not self.vulnerable_addresses == null then
        return self.vulnerable_addresses
    end if

    self.vulnerable_addresses = libs.metax.scan(self.meta_lib)
    return self.vulnerable_addresses
end function

MetaLib.find_exploits = function()
    all_exploits = []
    for vuln in self.vulnerable_addresses
        segments = metax.scan_address(self.meta_lib, vuln).split("Unsafe check: ")[1:]

        exploits = []
        for segment in segments
            exploits.push(segment[segment.indexOf("<b>") + 3 : segment.indexOf("</b>")])
        end for

        all_exploits = extend_map(all_exploits, exploits)
    end for

    self.exploits = all_exploits
    return all_exploits
end function

// End MetaLib Class //
///////////////////////

/////////////////////////////
// Define MetaSploit class //

MetaSploit = {}

// Attributes
MetaSploit.net_sessions = null
MetaSploit.router = null

MetaSploit.init = function(pub_ip=null)
    metasploit = new MetaSploit
    metasploit._init(pub_ip)

    return metasploit
end function

MetaSploit._init = function(pub_ip=null)
    if pub_ip == null then
        pub_ip = get_shell.host_computer.public_ip
    end if

    self.router = get_router(pub_ip)
    self.net_sessions = []

    for port in self.router.used_ports
        self.net_sessions.push(MetaLib.init(pub_ip, port))
    end for
end function

MetaSploit.find_vulnerabilities = function()
    vulns = []
    for metalib in self.net_sessions
        vulns = extend_map(vulns, metalib.find_vulnerabilities())
    end for

    return vulns
end function

MetaSploit.find_exploits = function()
    exploits = []
    for metalib in self.net_sessions
        exploits = extend_map(exploits, metalib.find_exploits)
    end for

    return exploits
end function

// End MetaSploit Class //
//////////////////////////
