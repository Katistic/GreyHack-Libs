/////////////////////////////////
// Extensions for String class //

string._is_in_string = function(container_string) // -> Boolean
    if container_string.hasIndex(self) == -1 then return false
    return true
end function

string._is_in_map = function(container_map) // -> Boolean
    for key in container_map.indexes() 
        if key == self then return true
    end for

    return false
end function

string._is_in_list = function(container_list) // -> Boolean
    for item in container_list
        if item == self then return true
    end for

    return false
end function

string.is_in = function(container) // -> Boolean
    if container isa string then return self._is_in_string(container)
    if container isa map then return self._is_in_map(container)
    if container isa list then return self._is_in_list(container)

    return false
end function

// End Extensions for String Class //
/////////////////////////////////////

///////////////////////////////
// Extensions for List Class //

list.extend = function(list2) // -> null
    for data in list2
        self.push(data)
    end for
end function

// End Extensions for List Class//
//////////////////////////////////

//////////////////////////////
// Extensions for Map Class //

map.update = function(map2) // -> null
    for key in map2
        self[key] = map2[key]
    end for
end function

// End Extensions for Map Class//
/////////////////////////////////

////////////////////////////
// Define initiator class //
ClassLib = {}

libs = {}
libs.metax = null

ClassLib.requires_metax = function() // -> null
    // _internal
    
    if libs.metax == null then
        libs.metax = include_lib("/lib/metaxploit.so")
    end if
end function

// End Initiator Class//
////////////////////////

/////////////////////////////////
// We define our network class //
Network = {}

// Attributes
Network.essid = null // ESSID of the network
Network.bssid = null // BSSID of the network
Network.power = null // Signal power of the network
Network.to_string = null // Network as a string

Network.init = function(network_as_string) // -> Network object
    network = new Network
    network._init(network_as_string)

    return network
end function

Network._init = function(network_as_string) // -> null
    self.to_string = network_as_string

    network = network_as_string.split(" ")
    self.essid = network[2]
    self.bssid = network[0]
    self.power = network[1][:2]

    self.to_map = {
        "essid": self.essid,
        "bssid": self.bssid,
        "power": self.power,
    }
end function

Network.get_networks = function(device="wlan0") // -> Map[Network objects]
    // Gets a map of Network objects for each network computer has visible

    network_list = get_shell.host_computer.wifi_networks(device)
    networks = []

    for network in network_list
        networks.push(Network.init(network))
    end for

    return networks
end function

// End Network Class //
///////////////////////

//////////////////////////
// Define MetaLib Class //

MetaLib = {}

// Attributes
MetaLib.net_session = null // metax NetSession object
MetaLib.meta_lib = null // metax MetaLib object
MetaLib.port = null // Port this MetaLib object is referencing
MetaLib.ip = null // Lan IP this MetaLib object is referencing
MetaLib.pub_ip = null // Public IP this MetaLib object is referencing
MetaLib.vulnerable_addresses = null // List of vulnerable address
MetaLib.exploits = null // List of exploits

MetaLib.init = function(pub_ip, port) // -> MetaLib object
    metalib = new MetaLib
    metalib._init(pub_ip, port)

    return metalib
end function

MetaLib._init = function(pub_ip, port) // -> null
    ClassLib.requires_metax()

    self.net_session = libs.metax.net_use(public_ip, port.port_number)
    self.meta_lib = net_session.dump_lib
    self.port = port
    self.ip = port.get_lan_ip
    self.pub_ip = pub_ip
end function

MetaLib.find_vulnerabilities = function() // -> List
    // Finds all vulnerable addresses on this MetaLib object (public IP  & port)

    if not self.vulnerable_addresses == null then
        return self.vulnerable_addresses
    end if

    self.vulnerable_addresses = libs.metax.scan(self.meta_lib)
    return self.vulnerable_addresses
end function

MetaLib.find_exploits = function() // -> List
    // Finds all exploits from addresses found using MetaLib.find_vulnerabilities

    all_exploits = []
    for vuln in self.vulnerable_addresses
        segments = metax.scan_address(self.meta_lib, vuln).split("Unsafe check: ")[1:]

        exploits = []
        for segment in segments
            exploits.push(segment[segment.indexOf("<b>") + 3 : segment.indexOf("</b>")])
        end for

        all_exploits.extend(exploits)
    end for

    self.exploits = all_exploits
    return all_exploits
end function

// End MetaLib Class //
///////////////////////

/////////////////////////////
// Define MetaSploit class //

MetaSploit = {}

// Attributes
MetaSploit.net_sessions = null // Map of MetaLib objects
MetaSploit.router = null // Router object

MetaSploit.init = function(pub_ip=null) // -> MetaSploit object
    // Creates a new MetaSploit object

    metasploit = new MetaSploit
    metasploit._init(pub_ip)

    return metasploit
end function

MetaSploit._init = function(pub_ip=null) // -> null
    if pub_ip == null then
        pub_ip = get_shell.host_computer.public_ip
    end if

    self.router = get_router(pub_ip)
    self.net_sessions = []

    for port in self.router.used_ports
        self.net_sessions.push(MetaLib.init(pub_ip, port))
    end for
end function

MetaSploit.find_vulnerabilities = function() // -> List
    // Finds all vulnerabilites from child MetaLib objects
    //
    // This just calls each MetaLib objects `find_vulnerabilities` function and
    // returns all results in a map

    vulns = []
    for metalib in self.net_sessions
        vulns.extend(metalib.MetaLib.find_vulnerabilities())
    end for

    return vulns
end function

MetaSploit.find_exploits = function() // -> List
    // Finds all exploits from child MetaLib objects
    //
    // This just calls each MetaLib objects `find_exploits` function and
    // returns all results in a list
    // Note: Please call `MetaSploit.find_vulnerabilities` first or this probably won't return anything
    
    exploits = []
    for metalib in self.net_sessions
        exploits.extend(metalib.find_exploits())
    end for

    return exploits
end function

// End MetaSploit Class //
//////////////////////////
